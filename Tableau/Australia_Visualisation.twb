<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20211.21.1217.2241                               -->
<workbook original-version='18.1' source-build='2021.1.10 (20211.21.1217.2241)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <MapboxVectorStylesAndLayers />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SheetIdentifierTracking />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='Sheet1 (Ak_Aus)' inline='true' name='federated.10rgcut0efqjzr12qmtow0beufvb' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='Ak_Aus' name='excel-direct.1wozmvp0yjal7t14l49en00o3pya'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/akash/Downloads/Ak_Aus.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='excel-direct.1wozmvp0yjal7t14l49en00o3pya' name='Sheet1' table='[Sheet1$]' type='table'>
          <columns gridOrigin='A1:I3467:no:A1:I3467:0' header='yes' outcome='6'>
            <column datatype='integer' name='Number' ordinal='0' />
            <column datatype='real' name='Latitude' ordinal='1' />
            <column datatype='real' name='Longitude' ordinal='2' />
            <column datatype='real' name='ANN1999' ordinal='3' />
            <column datatype='real' name='ANN2020' ordinal='4' />
            <column datatype='real' name='ANN Diff' ordinal='5' />
            <column datatype='real' name='Prec Avg 1999' ordinal='6' />
            <column datatype='real' name='Prec Avg 2020' ordinal='7' />
            <column datatype='real' name='Prec Diff' ordinal='8' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='excel-direct.1wozmvp0yjal7t14l49en00o3pya' name='Sheet1' table='[Sheet1$]' type='table'>
          <columns gridOrigin='A1:I3467:no:A1:I3467:0' header='yes' outcome='6'>
            <column datatype='integer' name='Number' ordinal='0' />
            <column datatype='real' name='Latitude' ordinal='1' />
            <column datatype='real' name='Longitude' ordinal='2' />
            <column datatype='real' name='ANN1999' ordinal='3' />
            <column datatype='real' name='ANN2020' ordinal='4' />
            <column datatype='real' name='ANN Diff' ordinal='5' />
            <column datatype='real' name='Prec Avg 1999' ordinal='6' />
            <column datatype='real' name='Prec Avg 2020' ordinal='7' />
            <column datatype='real' name='Prec Diff' ordinal='8' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:I3467:no:A1:I3467:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Number</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Number]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Number</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_B1292BB6C5B848D9BC064FDA21E947F0]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Latitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Latitude]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Latitude</remote-alias>
            <ordinal>1</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_B1292BB6C5B848D9BC064FDA21E947F0]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Longitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Longitude]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Longitude</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_B1292BB6C5B848D9BC064FDA21E947F0]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ANN1999</remote-name>
            <remote-type>5</remote-type>
            <local-name>[ANN1999]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>ANN1999</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_B1292BB6C5B848D9BC064FDA21E947F0]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ANN2020</remote-name>
            <remote-type>5</remote-type>
            <local-name>[ANN2020]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>ANN2020</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_B1292BB6C5B848D9BC064FDA21E947F0]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ANN Diff</remote-name>
            <remote-type>5</remote-type>
            <local-name>[ANN Diff]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>ANN Diff</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_B1292BB6C5B848D9BC064FDA21E947F0]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Prec Avg 1999</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Prec Avg 1999]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Prec Avg 1999</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_B1292BB6C5B848D9BC064FDA21E947F0]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Prec Avg 2020</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Prec Avg 2020]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Prec Avg 2020</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_B1292BB6C5B848D9BC064FDA21E947F0]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Prec Diff</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Prec Diff]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Prec Diff</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_B1292BB6C5B848D9BC064FDA21E947F0]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Ann1999' datatype='real' name='[ANN1999]' role='measure' type='quantitative' />
      <column aggregation='Avg' datatype='real' name='[Lat]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative' />
      <column aggregation='Avg' datatype='real' name='[Latitude]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative' />
      <column aggregation='Avg' datatype='real' name='[Long]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative' />
      <column aggregation='Avg' datatype='real' name='[Longitude]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative' />
      <column datatype='integer' name='[Number]' role='dimension' type='ordinal' />
      <_.fcp.ObjectModelTableType.true...column caption='Sheet1' datatype='table' name='[__tableau_internal_object_id__].[Sheet1_B1292BB6C5B848D9BC064FDA21E947F0]' role='measure' type='quantitative' />
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;India&quot;' />
      </semantic-values>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='Sheet1' id='Sheet1_B1292BB6C5B848D9BC064FDA21E947F0'>
            <properties context=''>
              <relation connection='excel-direct.1wozmvp0yjal7t14l49en00o3pya' name='Sheet1' table='[Sheet1$]' type='table'>
                <columns gridOrigin='A1:I3467:no:A1:I3467:0' header='yes' outcome='6'>
                  <column datatype='integer' name='Number' ordinal='0' />
                  <column datatype='real' name='Latitude' ordinal='1' />
                  <column datatype='real' name='Longitude' ordinal='2' />
                  <column datatype='real' name='ANN1999' ordinal='3' />
                  <column datatype='real' name='ANN2020' ordinal='4' />
                  <column datatype='real' name='ANN Diff' ordinal='5' />
                  <column datatype='real' name='Prec Avg 1999' ordinal='6' />
                  <column datatype='real' name='Prec Avg 2020' ordinal='7' />
                  <column datatype='real' name='Prec Diff' ordinal='8' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='Earth Temp'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (Ak_Aus)' name='federated.10rgcut0efqjzr12qmtow0beufvb' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.10rgcut0efqjzr12qmtow0beufvb'>
            <column datatype='real' name='[ANN Diff]' role='measure' type='quantitative' />
            <column aggregation='Avg' datatype='real' name='[Latitude]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative' />
            <column aggregation='Avg' datatype='real' name='[Longitude]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative' />
            <column datatype='integer' name='[Number]' role='dimension' type='ordinal' />
            <column-instance column='[Latitude]' derivation='Avg' name='[avg:Latitude:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Longitude]' derivation='Avg' name='[avg:Longitude:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Number]' derivation='None' name='[none:Number:ok]' pivot='key' type='ordinal' />
            <column-instance column='[ANN Diff]' derivation='Sum' name='[sum:ANN Diff:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.10rgcut0efqjzr12qmtow0beufvb].[none:Number:ok]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Number:ok]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:Number:ok]' member='42' />
                <groupfilter function='member' level='[none:Number:ok]' member='56' />
                <groupfilter function='member' level='[none:Number:ok]' member='70' />
                <groupfilter function='member' level='[none:Number:ok]' member='83' />
                <groupfilter function='member' level='[none:Number:ok]' member='84' />
                <groupfilter function='member' level='[none:Number:ok]' member='97' />
                <groupfilter function='member' level='[none:Number:ok]' member='98' />
                <groupfilter from='110' function='range' level='[none:Number:ok]' to='112' />
                <groupfilter from='123' function='range' level='[none:Number:ok]' to='126' />
                <groupfilter from='136' function='range' level='[none:Number:ok]' to='140' />
                <groupfilter from='150' function='range' level='[none:Number:ok]' to='154' />
                <groupfilter from='163' function='range' level='[none:Number:ok]' to='168' />
                <groupfilter from='177' function='range' level='[none:Number:ok]' to='182' />
                <groupfilter from='190' function='range' level='[none:Number:ok]' to='199' />
                <groupfilter from='204' function='range' level='[none:Number:ok]' to='234' />
                <groupfilter from='241' function='range' level='[none:Number:ok]' to='245' />
                <groupfilter from='252' function='range' level='[none:Number:ok]' to='256' />
                <groupfilter from='263' function='range' level='[none:Number:ok]' to='267' />
                <groupfilter from='274' function='range' level='[none:Number:ok]' to='278' />
                <groupfilter from='285' function='range' level='[none:Number:ok]' to='289' />
                <groupfilter from='296' function='range' level='[none:Number:ok]' to='300' />
                <groupfilter from='307' function='range' level='[none:Number:ok]' to='311' />
                <groupfilter from='317' function='range' level='[none:Number:ok]' to='322' />
                <groupfilter from='326' function='range' level='[none:Number:ok]' to='333' />
                <groupfilter from='337' function='range' level='[none:Number:ok]' to='344' />
                <groupfilter from='347' function='range' level='[none:Number:ok]' to='355' />
                <groupfilter from='358' function='range' level='[none:Number:ok]' to='366' />
                <groupfilter from='368' function='range' level='[none:Number:ok]' to='377' />
                <groupfilter from='379' function='range' level='[none:Number:ok]' to='388' />
                <groupfilter from='390' function='range' level='[none:Number:ok]' to='428' />
                <groupfilter from='441' function='range' level='[none:Number:ok]' to='446' />
                <groupfilter from='460' function='range' level='[none:Number:ok]' to='464' />
                <groupfilter from='479' function='range' level='[none:Number:ok]' to='482' />
                <groupfilter from='498' function='range' level='[none:Number:ok]' to='500' />
                <groupfilter function='member' level='[none:Number:ok]' member='517' />
                <groupfilter function='member' level='[none:Number:ok]' member='518' />
                <groupfilter function='member' level='[none:Number:ok]' member='535' />
                <groupfilter function='member' level='[none:Number:ok]' member='536' />
                <groupfilter function='member' level='[none:Number:ok]' member='553' />
                <groupfilter function='member' level='[none:Number:ok]' member='554' />
                <groupfilter function='member' level='[none:Number:ok]' member='571' />
                <groupfilter function='member' level='[none:Number:ok]' member='572' />
                <groupfilter function='member' level='[none:Number:ok]' member='589' />
                <groupfilter function='member' level='[none:Number:ok]' member='590' />
                <groupfilter function='member' level='[none:Number:ok]' member='607' />
                <groupfilter function='member' level='[none:Number:ok]' member='608' />
                <groupfilter function='member' level='[none:Number:ok]' member='625' />
                <groupfilter function='member' level='[none:Number:ok]' member='626' />
                <groupfilter function='member' level='[none:Number:ok]' member='643' />
                <groupfilter function='member' level='[none:Number:ok]' member='644' />
                <groupfilter from='654' function='range' level='[none:Number:ok]' to='664' />
                <groupfilter from='674' function='range' level='[none:Number:ok]' to='684' />
                <groupfilter from='694' function='range' level='[none:Number:ok]' to='704' />
                <groupfilter from='714' function='range' level='[none:Number:ok]' to='724' />
                <groupfilter from='735' function='range' level='[none:Number:ok]' to='744' />
                <groupfilter from='757' function='range' level='[none:Number:ok]' to='764' />
                <groupfilter from='778' function='range' level='[none:Number:ok]' to='784' />
                <groupfilter from='799' function='range' level='[none:Number:ok]' to='804' />
                <groupfilter from='821' function='range' level='[none:Number:ok]' to='824' />
                <groupfilter from='842' function='range' level='[none:Number:ok]' to='844' />
                <groupfilter function='member' level='[none:Number:ok]' member='863' />
                <groupfilter function='member' level='[none:Number:ok]' member='864' />
                <groupfilter from='884' function='range' level='[none:Number:ok]' to='887' />
                <groupfilter from='889' function='range' level='[none:Number:ok]' to='897' />
                <groupfilter from='899' function='range' level='[none:Number:ok]' to='907' />
                <groupfilter from='910' function='range' level='[none:Number:ok]' to='916' />
                <groupfilter from='921' function='range' level='[none:Number:ok]' to='926' />
                <groupfilter from='931' function='range' level='[none:Number:ok]' to='936' />
                <groupfilter from='941' function='range' level='[none:Number:ok]' to='946' />
                <groupfilter from='951' function='range' level='[none:Number:ok]' to='956' />
                <groupfilter from='963' function='range' level='[none:Number:ok]' to='966' />
                <groupfilter from='973' function='range' level='[none:Number:ok]' to='976' />
                <groupfilter function='member' level='[none:Number:ok]' member='985' />
                <groupfilter function='member' level='[none:Number:ok]' member='986' />
                <groupfilter function='member' level='[none:Number:ok]' member='995' />
                <groupfilter function='member' level='[none:Number:ok]' member='996' />
                <groupfilter from='1005' function='range' level='[none:Number:ok]' to='1043' />
                <groupfilter from='1056' function='range' level='[none:Number:ok]' to='1061' />
                <groupfilter from='1074' function='range' level='[none:Number:ok]' to='1078' />
                <groupfilter from='1092' function='range' level='[none:Number:ok]' to='1095' />
                <groupfilter from='1109' function='range' level='[none:Number:ok]' to='1113' />
                <groupfilter from='1126' function='range' level='[none:Number:ok]' to='1131' />
                <groupfilter from='1144' function='range' level='[none:Number:ok]' to='1148' />
                <groupfilter from='1162' function='range' level='[none:Number:ok]' to='1166' />
                <groupfilter from='1182' function='range' level='[none:Number:ok]' to='1184' />
                <groupfilter function='member' level='[none:Number:ok]' member='1202' />
                <groupfilter from='1705' function='range' level='[none:Number:ok]' to='1713' />
                <groupfilter from='1725' function='range' level='[none:Number:ok]' to='1734' />
                <groupfilter from='1745' function='range' level='[none:Number:ok]' to='1755' />
                <groupfilter function='member' level='[none:Number:ok]' member='1762' />
                <groupfilter from='1765' function='range' level='[none:Number:ok]' to='1776' />
                <groupfilter function='member' level='[none:Number:ok]' member='1781' />
                <groupfilter function='member' level='[none:Number:ok]' member='1782' />
                <groupfilter from='1785' function='range' level='[none:Number:ok]' to='1797' />
                <groupfilter function='member' level='[none:Number:ok]' member='1800' />
                <groupfilter function='member' level='[none:Number:ok]' member='1801' />
                <groupfilter from='1805' function='range' level='[none:Number:ok]' to='1821' />
                <groupfilter from='1825' function='range' level='[none:Number:ok]' to='1841' />
                <groupfilter from='1845' function='range' level='[none:Number:ok]' to='1862' />
                <groupfilter from='1865' function='range' level='[none:Number:ok]' to='1944' />
                <groupfilter function='member' level='[none:Number:ok]' member='2047' />
                <groupfilter function='member' level='[none:Number:ok]' member='2051' />
                <groupfilter function='member' level='[none:Number:ok]' member='2055' />
                <groupfilter function='member' level='[none:Number:ok]' member='2056' />
                <groupfilter function='member' level='[none:Number:ok]' member='2059' />
                <groupfilter function='member' level='[none:Number:ok]' member='2060' />
                <groupfilter from='2391' function='range' level='[none:Number:ok]' to='2393' />
                <groupfilter from='2405' function='range' level='[none:Number:ok]' to='2412' />
                <groupfilter from='2422' function='range' level='[none:Number:ok]' to='2431' />
                <groupfilter from='2441' function='range' level='[none:Number:ok]' to='2451' />
                <groupfilter function='member' level='[none:Number:ok]' member='2463' />
                <groupfilter function='member' level='[none:Number:ok]' member='2475' />
                <groupfilter function='member' level='[none:Number:ok]' member='2487' />
                <groupfilter function='member' level='[none:Number:ok]' member='2499' />
                <groupfilter function='member' level='[none:Number:ok]' member='2511' />
                <groupfilter function='member' level='[none:Number:ok]' member='2512' />
                <groupfilter function='member' level='[none:Number:ok]' member='2523' />
                <groupfilter function='member' level='[none:Number:ok]' member='2524' />
                <groupfilter from='2535' function='range' level='[none:Number:ok]' to='2537' />
                <groupfilter from='2547' function='range' level='[none:Number:ok]' to='2549' />
                <groupfilter from='2559' function='range' level='[none:Number:ok]' to='2562' />
                <groupfilter from='2571' function='range' level='[none:Number:ok]' to='2574' />
                <groupfilter from='2583' function='range' level='[none:Number:ok]' to='2586' />
                <groupfilter from='2595' function='range' level='[none:Number:ok]' to='2598' />
                <groupfilter from='2607' function='range' level='[none:Number:ok]' to='2610' />
                <groupfilter from='2619' function='range' level='[none:Number:ok]' to='2623' />
                <groupfilter from='2631' function='range' level='[none:Number:ok]' to='2635' />
                <groupfilter from='2643' function='range' level='[none:Number:ok]' to='2645' />
                <groupfilter from='2655' function='range' level='[none:Number:ok]' to='2660' />
                <groupfilter from='2665' function='range' level='[none:Number:ok]' to='2705' />
                <groupfilter from='2707' function='range' level='[none:Number:ok]' to='2724' />
                <groupfilter from='2727' function='range' level='[none:Number:ok]' to='2743' />
                <groupfilter from='2747' function='range' level='[none:Number:ok]' to='2764' />
                <groupfilter from='2767' function='range' level='[none:Number:ok]' to='2783' />
                <groupfilter from='2787' function='range' level='[none:Number:ok]' to='2801' />
                <groupfilter from='2807' function='range' level='[none:Number:ok]' to='2818' />
                <groupfilter from='2827' function='range' level='[none:Number:ok]' to='2832' />
                <groupfilter from='2847' function='range' level='[none:Number:ok]' to='2851' />
                <groupfilter from='2867' function='range' level='[none:Number:ok]' to='2870' />
                <groupfilter from='2887' function='range' level='[none:Number:ok]' to='2889' />
                <groupfilter function='member' level='[none:Number:ok]' member='2907' />
                <groupfilter function='member' level='[none:Number:ok]' member='2927' />
                <groupfilter function='member' level='[none:Number:ok]' member='2947' />
                <groupfilter function='member' level='[none:Number:ok]' member='2967' />
                <groupfilter function='member' level='[none:Number:ok]' member='2987' />
                <groupfilter function='member' level='[none:Number:ok]' member='3007' />
                <groupfilter function='member' level='[none:Number:ok]' member='3027' />
                <groupfilter function='member' level='[none:Number:ok]' member='3028' />
                <groupfilter function='member' level='[none:Number:ok]' member='3047' />
                <groupfilter function='member' level='[none:Number:ok]' member='3048' />
                <groupfilter from='3067' function='range' level='[none:Number:ok]' to='3079' />
                <groupfilter from='3084' function='range' level='[none:Number:ok]' to='3099' />
                <groupfilter from='3105' function='range' level='[none:Number:ok]' to='3118' />
                <groupfilter from='3126' function='range' level='[none:Number:ok]' to='3137' />
                <groupfilter from='3147' function='range' level='[none:Number:ok]' to='3157' />
                <groupfilter from='3167' function='range' level='[none:Number:ok]' to='3175' />
                <groupfilter from='3187' function='range' level='[none:Number:ok]' to='3193' />
                <groupfilter from='3207' function='range' level='[none:Number:ok]' to='3212' />
                <groupfilter from='3227' function='range' level='[none:Number:ok]' to='3231' />
                <groupfilter from='3247' function='range' level='[none:Number:ok]' to='3252' />
                <groupfilter from='3267' function='range' level='[none:Number:ok]' to='3271' />
                <groupfilter from='3287' function='range' level='[none:Number:ok]' to='3289' />
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.10rgcut0efqjzr12qmtow0beufvb].[none:Number:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.10rgcut0efqjzr12qmtow0beufvb].[avg:Longitude:qk]' field-type='quantitative' max='20404023.468936041' min='11090519.471832965' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.10rgcut0efqjzr12qmtow0beufvb].[avg:Latitude:qk]' field-type='quantitative' max='-32409.116399419494' min='-5479787.3191594593' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.10rgcut0efqjzr12qmtow0beufvb].[sum:ANN Diff:qk]' max='3.0' palette='red_green_diverging_10_0' reverse='true' symmetric='false' type='interpolated' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='b01002_001e' value='false' />
            <format attr='enabled' id='b01002_002e' value='false' />
            <format attr='enabled' id='b01002_003e' value='false' />
            <format attr='enabled' id='dp02_0001e' value='false' />
            <format attr='enabled' id='dp02_0015e' value='false' />
            <format attr='enabled' id='dp03_0027e_plus_dp03_0029e' value='false' />
            <format attr='enabled' id='dp03_0028e' value='false' />
            <format attr='enabled' id='dp03_0030e_plus_dp03_0031e' value='false' />
            <format attr='enabled' id='dp03_0062e' value='false' />
            <format attr='enabled' id='dp03_0088e' value='false' />
            <format attr='enabled' id='dp04_0001e' value='false' />
            <format attr='enabled' id='dp04_0046e' value='false' />
            <format attr='enabled' id='dp04_0047e' value='false' />
            <format attr='enabled' id='dp04_0089e' value='false' />
            <format attr='enabled' id='dp05_0001e' value='false' />
            <format attr='enabled' id='dp05_0002e_div_dp05_0003e' value='false' />
            <format attr='enabled' id='dp05_0032e' value='false' />
            <format attr='enabled' id='dp05_0033e' value='false' />
            <format attr='enabled' id='dp05_0034e' value='false' />
            <format attr='enabled' id='dp05_0039e' value='false' />
            <format attr='enabled' id='dp05_0047e' value='false' />
            <format attr='enabled' id='dp05_0053e' value='false' />
            <format attr='enabled' id='dp05_0066e' value='false' />
            <format attr='enabled' id='dp05_0077e' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0' />
            <format attr='map-style' value='normal' />
          </style-rule>
          <style-rule element='map-data-layer'>
            <format attr='palette' value='tableau-map-blue-green-light' />
            <format attr='geo-area-type' value='State' />
          </style-rule>
        </style>
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.10rgcut0efqjzr12qmtow0beufvb].[sum:ANN Diff:qk]' />
              <lod column='[federated.10rgcut0efqjzr12qmtow0beufvb].[none:Number:ok]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.10rgcut0efqjzr12qmtow0beufvb].[avg:Latitude:qk]</rows>
        <cols>[federated.10rgcut0efqjzr12qmtow0beufvb].[avg:Longitude:qk]</cols>
      </table>
      <simple-id uuid='{31B1D8BD-ACB8-4D50-B354-14AA38AD2473}' />
    </worksheet>
    <worksheet name='Precipitation'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (Ak_Aus)' name='federated.10rgcut0efqjzr12qmtow0beufvb' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.10rgcut0efqjzr12qmtow0beufvb'>
            <column aggregation='Avg' datatype='real' name='[Latitude]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative' />
            <column aggregation='Avg' datatype='real' name='[Longitude]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative' />
            <column datatype='integer' name='[Number]' role='dimension' type='ordinal' />
            <column datatype='real' name='[Prec Diff]' role='measure' type='quantitative' />
            <column-instance column='[Latitude]' derivation='Avg' name='[avg:Latitude:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Longitude]' derivation='Avg' name='[avg:Longitude:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Prec Diff]' derivation='Avg' name='[avg:Prec Diff:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Number]' derivation='None' name='[none:Number:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.10rgcut0efqjzr12qmtow0beufvb].[none:Number:ok]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Number:ok]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:Number:ok]' member='198' />
                <groupfilter function='member' level='[none:Number:ok]' member='205' />
                <groupfilter function='member' level='[none:Number:ok]' member='206' />
                <groupfilter from='211' function='range' level='[none:Number:ok]' to='226' />
                <groupfilter from='228' function='range' level='[none:Number:ok]' to='234' />
                <groupfilter from='242' function='range' level='[none:Number:ok]' to='245' />
                <groupfilter from='253' function='range' level='[none:Number:ok]' to='256' />
                <groupfilter from='264' function='range' level='[none:Number:ok]' to='267' />
                <groupfilter from='274' function='range' level='[none:Number:ok]' to='278' />
                <groupfilter from='285' function='range' level='[none:Number:ok]' to='289' />
                <groupfilter from='296' function='range' level='[none:Number:ok]' to='300' />
                <groupfilter from='307' function='range' level='[none:Number:ok]' to='311' />
                <groupfilter from='317' function='range' level='[none:Number:ok]' to='322' />
                <groupfilter from='327' function='range' level='[none:Number:ok]' to='333' />
                <groupfilter from='337' function='range' level='[none:Number:ok]' to='344' />
                <groupfilter from='347' function='range' level='[none:Number:ok]' to='355' />
                <groupfilter from='358' function='range' level='[none:Number:ok]' to='366' />
                <groupfilter from='369' function='range' level='[none:Number:ok]' to='377' />
                <groupfilter from='379' function='range' level='[none:Number:ok]' to='388' />
                <groupfilter from='390' function='range' level='[none:Number:ok]' to='410' />
                <groupfilter from='423' function='range' level='[none:Number:ok]' to='428' />
                <groupfilter from='441' function='range' level='[none:Number:ok]' to='446' />
                <groupfilter from='459' function='range' level='[none:Number:ok]' to='464' />
                <groupfilter from='479' function='range' level='[none:Number:ok]' to='482' />
                <groupfilter from='498' function='range' level='[none:Number:ok]' to='500' />
                <groupfilter function='member' level='[none:Number:ok]' member='517' />
                <groupfilter function='member' level='[none:Number:ok]' member='518' />
                <groupfilter function='member' level='[none:Number:ok]' member='535' />
                <groupfilter function='member' level='[none:Number:ok]' member='536' />
                <groupfilter function='member' level='[none:Number:ok]' member='553' />
                <groupfilter function='member' level='[none:Number:ok]' member='554' />
                <groupfilter function='member' level='[none:Number:ok]' member='571' />
                <groupfilter function='member' level='[none:Number:ok]' member='572' />
                <groupfilter function='member' level='[none:Number:ok]' member='589' />
                <groupfilter function='member' level='[none:Number:ok]' member='590' />
                <groupfilter function='member' level='[none:Number:ok]' member='608' />
                <groupfilter function='member' level='[none:Number:ok]' member='626' />
                <groupfilter function='member' level='[none:Number:ok]' member='644' />
                <groupfilter from='654' function='range' level='[none:Number:ok]' to='664' />
                <groupfilter from='675' function='range' level='[none:Number:ok]' to='684' />
                <groupfilter from='695' function='range' level='[none:Number:ok]' to='704' />
                <groupfilter from='716' function='range' level='[none:Number:ok]' to='724' />
                <groupfilter from='736' function='range' level='[none:Number:ok]' to='744' />
                <groupfilter from='757' function='range' level='[none:Number:ok]' to='764' />
                <groupfilter from='779' function='range' level='[none:Number:ok]' to='784' />
                <groupfilter from='800' function='range' level='[none:Number:ok]' to='804' />
                <groupfilter from='821' function='range' level='[none:Number:ok]' to='824' />
                <groupfilter from='842' function='range' level='[none:Number:ok]' to='844' />
                <groupfilter from='862' function='range' level='[none:Number:ok]' to='864' />
                <groupfilter from='884' function='range' level='[none:Number:ok]' to='897' />
                <groupfilter from='900' function='range' level='[none:Number:ok]' to='907' />
                <groupfilter from='910' function='range' level='[none:Number:ok]' to='916' />
                <groupfilter from='921' function='range' level='[none:Number:ok]' to='926' />
                <groupfilter from='931' function='range' level='[none:Number:ok]' to='936' />
                <groupfilter from='941' function='range' level='[none:Number:ok]' to='946' />
                <groupfilter from='951' function='range' level='[none:Number:ok]' to='956' />
                <groupfilter from='962' function='range' level='[none:Number:ok]' to='966' />
                <groupfilter from='974' function='range' level='[none:Number:ok]' to='976' />
                <groupfilter function='member' level='[none:Number:ok]' member='985' />
                <groupfilter function='member' level='[none:Number:ok]' member='986' />
                <groupfilter function='member' level='[none:Number:ok]' member='995' />
                <groupfilter function='member' level='[none:Number:ok]' member='996' />
                <groupfilter from='1005' function='range' level='[none:Number:ok]' to='1007' />
                <groupfilter function='member' level='[none:Number:ok]' member='1010' />
                <groupfilter from='1013' function='range' level='[none:Number:ok]' to='1025' />
                <groupfilter function='member' level='[none:Number:ok]' member='1028' />
                <groupfilter function='member' level='[none:Number:ok]' member='1029' />
                <groupfilter from='1032' function='range' level='[none:Number:ok]' to='1043' />
                <groupfilter from='1056' function='range' level='[none:Number:ok]' to='1061' />
                <groupfilter from='1074' function='range' level='[none:Number:ok]' to='1078' />
                <groupfilter from='1092' function='range' level='[none:Number:ok]' to='1095' />
                <groupfilter from='1109' function='range' level='[none:Number:ok]' to='1113' />
                <groupfilter from='1126' function='range' level='[none:Number:ok]' to='1131' />
                <groupfilter from='1144' function='range' level='[none:Number:ok]' to='1148' />
                <groupfilter from='1163' function='range' level='[none:Number:ok]' to='1166' />
                <groupfilter from='1182' function='range' level='[none:Number:ok]' to='1184' />
                <groupfilter function='member' level='[none:Number:ok]' member='1202' />
                <groupfilter from='1685' function='range' level='[none:Number:ok]' to='1690' />
                <groupfilter from='1705' function='range' level='[none:Number:ok]' to='1713' />
                <groupfilter from='1725' function='range' level='[none:Number:ok]' to='1734' />
                <groupfilter from='1745' function='range' level='[none:Number:ok]' to='1755' />
                <groupfilter function='member' level='[none:Number:ok]' member='1762' />
                <groupfilter from='1765' function='range' level='[none:Number:ok]' to='1776' />
                <groupfilter function='member' level='[none:Number:ok]' member='1781' />
                <groupfilter from='1785' function='range' level='[none:Number:ok]' to='1796' />
                <groupfilter function='member' level='[none:Number:ok]' member='1800' />
                <groupfilter function='member' level='[none:Number:ok]' member='1801' />
                <groupfilter from='1805' function='range' level='[none:Number:ok]' to='1817' />
                <groupfilter from='1819' function='range' level='[none:Number:ok]' to='1821' />
                <groupfilter function='member' level='[none:Number:ok]' member='1823' />
                <groupfilter from='1825' function='range' level='[none:Number:ok]' to='1843' />
                <groupfilter from='1845' function='range' level='[none:Number:ok]' to='1859' />
                <groupfilter from='1864' function='range' level='[none:Number:ok]' to='1944' />
                <groupfilter function='member' level='[none:Number:ok]' member='2043' />
                <groupfilter function='member' level='[none:Number:ok]' member='2047' />
                <groupfilter function='member' level='[none:Number:ok]' member='2051' />
                <groupfilter function='member' level='[none:Number:ok]' member='2055' />
                <groupfilter function='member' level='[none:Number:ok]' member='2059' />
                <groupfilter function='member' level='[none:Number:ok]' member='2060' />
                <groupfilter from='2390' function='range' level='[none:Number:ok]' to='2393' />
                <groupfilter from='2405' function='range' level='[none:Number:ok]' to='2412' />
                <groupfilter from='2422' function='range' level='[none:Number:ok]' to='2431' />
                <groupfilter from='2440' function='range' level='[none:Number:ok]' to='2450' />
                <groupfilter function='member' level='[none:Number:ok]' member='2475' />
                <groupfilter function='member' level='[none:Number:ok]' member='2487' />
                <groupfilter function='member' level='[none:Number:ok]' member='2499' />
                <groupfilter function='member' level='[none:Number:ok]' member='2511' />
                <groupfilter function='member' level='[none:Number:ok]' member='2512' />
                <groupfilter from='2523' function='range' level='[none:Number:ok]' to='2525' />
                <groupfilter from='2535' function='range' level='[none:Number:ok]' to='2537' />
                <groupfilter from='2547' function='range' level='[none:Number:ok]' to='2549' />
                <groupfilter from='2559' function='range' level='[none:Number:ok]' to='2561' />
                <groupfilter from='2571' function='range' level='[none:Number:ok]' to='2574' />
                <groupfilter from='2583' function='range' level='[none:Number:ok]' to='2586' />
                <groupfilter from='2595' function='range' level='[none:Number:ok]' to='2598' />
                <groupfilter from='2607' function='range' level='[none:Number:ok]' to='2610' />
                <groupfilter from='2619' function='range' level='[none:Number:ok]' to='2623' />
                <groupfilter from='2631' function='range' level='[none:Number:ok]' to='2635' />
                <groupfilter from='2643' function='range' level='[none:Number:ok]' to='2646' />
                <groupfilter from='2655' function='range' level='[none:Number:ok]' to='2659' />
                <groupfilter from='2665' function='range' level='[none:Number:ok]' to='2724' />
                <groupfilter from='2727' function='range' level='[none:Number:ok]' to='2744' />
                <groupfilter from='2747' function='range' level='[none:Number:ok]' to='2764' />
                <groupfilter from='2767' function='range' level='[none:Number:ok]' to='2783' />
                <groupfilter from='2787' function='range' level='[none:Number:ok]' to='2803' />
                <groupfilter from='2807' function='range' level='[none:Number:ok]' to='2821' />
                <groupfilter from='2827' function='range' level='[none:Number:ok]' to='2837' />
                <groupfilter from='2847' function='range' level='[none:Number:ok]' to='2853' />
                <groupfilter from='2867' function='range' level='[none:Number:ok]' to='2871' />
                <groupfilter from='2887' function='range' level='[none:Number:ok]' to='2890' />
                <groupfilter from='2907' function='range' level='[none:Number:ok]' to='2909' />
                <groupfilter function='member' level='[none:Number:ok]' member='2927' />
                <groupfilter function='member' level='[none:Number:ok]' member='2947' />
                <groupfilter function='member' level='[none:Number:ok]' member='2967' />
                <groupfilter function='member' level='[none:Number:ok]' member='2987' />
                <groupfilter function='member' level='[none:Number:ok]' member='3007' />
                <groupfilter function='member' level='[none:Number:ok]' member='3027' />
                <groupfilter function='member' level='[none:Number:ok]' member='3047' />
                <groupfilter from='3067' function='range' level='[none:Number:ok]' to='3100' />
                <groupfilter from='3105' function='range' level='[none:Number:ok]' to='3120' />
                <groupfilter from='3127' function='range' level='[none:Number:ok]' to='3138' />
                <groupfilter from='3147' function='range' level='[none:Number:ok]' to='3157' />
                <groupfilter from='3167' function='range' level='[none:Number:ok]' to='3176' />
                <groupfilter from='3187' function='range' level='[none:Number:ok]' to='3195' />
                <groupfilter from='3207' function='range' level='[none:Number:ok]' to='3212' />
                <groupfilter from='3227' function='range' level='[none:Number:ok]' to='3232' />
                <groupfilter from='3247' function='range' level='[none:Number:ok]' to='3252' />
                <groupfilter from='3267' function='range' level='[none:Number:ok]' to='3271' />
                <groupfilter from='3287' function='range' level='[none:Number:ok]' to='3291' />
                <groupfilter from='3307' function='range' level='[none:Number:ok]' to='3309' />
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.10rgcut0efqjzr12qmtow0beufvb].[none:Number:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.10rgcut0efqjzr12qmtow0beufvb].[avg:Longitude:qk]' field-type='quantitative' max='19826501.864320129' min='10864952.628002644' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.10rgcut0efqjzr12qmtow0beufvb].[avg:Latitude:qk]' field-type='quantitative' max='-177746.98309325054' min='-5419270.2581206784' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='b01002_001e' value='false' />
            <format attr='enabled' id='b01002_002e' value='false' />
            <format attr='enabled' id='b01002_003e' value='false' />
            <format attr='enabled' id='dp02_0001e' value='false' />
            <format attr='enabled' id='dp02_0015e' value='false' />
            <format attr='enabled' id='dp03_0027e_plus_dp03_0029e' value='false' />
            <format attr='enabled' id='dp03_0028e' value='false' />
            <format attr='enabled' id='dp03_0030e_plus_dp03_0031e' value='false' />
            <format attr='enabled' id='dp03_0062e' value='false' />
            <format attr='enabled' id='dp03_0088e' value='false' />
            <format attr='enabled' id='dp04_0001e' value='false' />
            <format attr='enabled' id='dp04_0046e' value='false' />
            <format attr='enabled' id='dp04_0047e' value='false' />
            <format attr='enabled' id='dp04_0089e' value='false' />
            <format attr='enabled' id='dp05_0001e' value='false' />
            <format attr='enabled' id='dp05_0002e_div_dp05_0003e' value='false' />
            <format attr='enabled' id='dp05_0032e' value='false' />
            <format attr='enabled' id='dp05_0033e' value='false' />
            <format attr='enabled' id='dp05_0034e' value='false' />
            <format attr='enabled' id='dp05_0039e' value='false' />
            <format attr='enabled' id='dp05_0047e' value='false' />
            <format attr='enabled' id='dp05_0053e' value='false' />
            <format attr='enabled' id='dp05_0066e' value='false' />
            <format attr='enabled' id='dp05_0077e' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0' />
            <format attr='map-style' value='normal' />
          </style-rule>
          <style-rule element='map-data-layer'>
            <format attr='palette' value='tableau-map-blue-green-light' />
            <format attr='geo-area-type' value='State' />
          </style-rule>
        </style>
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.10rgcut0efqjzr12qmtow0beufvb].[avg:Prec Diff:qk]' />
              <lod column='[federated.10rgcut0efqjzr12qmtow0beufvb].[none:Number:ok]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.10rgcut0efqjzr12qmtow0beufvb].[avg:Latitude:qk]</rows>
        <cols>[federated.10rgcut0efqjzr12qmtow0beufvb].[avg:Longitude:qk]</cols>
      </table>
      <simple-id uuid='{35F72E27-1F07-47BD-B151-372BD505DBD4}' />
    </worksheet>
  </worksheets>
  <windows saved-dpi-scale-factor='1.25' source-height='37'>
    <window class='worksheet' name='Earth Temp'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='2' param='[federated.10rgcut0efqjzr12qmtow0beufvb].[sum:ANN Diff:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.10rgcut0efqjzr12qmtow0beufvb].[none:Number:ok]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='2' />
      </viewpoint>
      <simple-id uuid='{BFE4642B-F505-4109-8E4D-3F0C6FD0A08B}' />
    </window>
    <window class='worksheet' maximized='true' name='Precipitation'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='2' param='[federated.10rgcut0efqjzr12qmtow0beufvb].[avg:Prec Diff:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.10rgcut0efqjzr12qmtow0beufvb].[avg:Prec Diff:qk]</field>
            <field>[federated.10rgcut0efqjzr12qmtow0beufvb].[none:Number:ok]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='2' />
      </viewpoint>
      <simple-id uuid='{198F9ED3-3343-4A99-A60F-8B8B76B606D7}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Earth Temp' width='192'>
      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
      NA2LL3CXgTfNpHleXHT2W/3+c4UUz2JVy/EMQpxSiuQFs+Xn4Wy9R6o1qdb00xQfwmO8qNeW
      1xai/TjoKK/Lvj2+s4GVCKOiYLPX49b6Ou9vbj7zN7f6fW6eqVl+E/A2RXZOI+lqexcvqKkD
      8GAyeSqrU2vNgwcPGHQBg5fF6VY5Z/lqAk/Urr+21F5uDL2uFUeqNUnXo+csbWIlpUqx1etF
      Dk9dr4plWudWiaaNXg8tsX2LVopJl66vrF0V6Z+mLKtu39nbr7sSyC/6zP26Yb1f1TW/KCpr
      mVYVWWebnwelFFprFh2vK38F2uB0GPawa3JmtH6C9rLqC/Q6oWDVLuRsj6Gzg/B0N7rQ8WaW
      Azo9x6EKnSMagJPFgvWuLHMpPHuTyRMPMOmo02+LAKxqLC6JZZb6s7h6Aa53z111xz4LYwwn
      JyfkvR4niwXbr0gbLHG0WHB8gRP/mZA7PPEhnR3A5xbAn3mQyxDjRYUVIrLqtBCAO0dHURuE
      cGEE6rOKTH1WeJ7BnyrF+nM0KXgV2J1MVtV/Fz1H7z1Ga9a60tfL4LJdQDZ6vc9XACAyF/9w
      fz+25uucko2ieEzdneUVXUQdOK9DRQixLcfxYvGFdabPw7L4ZVmyqTvhfhGkSvHexgbHL9mZ
      7lLH0pqrwyFFktBay6JpntneRnW5iKfR60+b0LW11NYyzLKn0kyEWM56uFg8ce8+c45rIIZM
      G+eYNw2FMaTGoCQ2p0qMobU29tlJ08eaOJ3VHqcFwXdd2T7Y2FjlLKS7oZOu6dUXSSyWvUSX
      /s/ubBYL1i8x+BOlQOQJTVckCYumuVTxz8tAgJtdN5AQAkqpcwuoTuN5qBP3x+NYA9L1RW2s
      JdGaXkdCPA/Dro/Rw8nksRrtz5WsH4DFmYJr1/kj07pe1ermxrBRFCsV+sTvnKHIms7TP60Z
      xp30L+nLz4rbr7oqh1fX9/Si2XtJNXmsoCcEdqfT1ftn57endZpe9uk5+/ll5djrngjWe73Y
      0qW71kXTYLSOvUy7OursTG0JPN52c3XeZ6wC21W2nb6Py3Jb0z3bYZadm73OjeHacMi0rpl0
      ka03o1rlGais5cF0SqIUpmtMlXXVSctGUmmSoGHV3WL9VEcL5z1rRUEvTUm62WhcluzP5xgR
      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
      rkJggg==
    </thumbnail>
    <thumbnail height='192' name='Precipitation' width='192'>
      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
      RU5ErkJggg==
    </thumbnail>
  </thumbnails>
</workbook>
